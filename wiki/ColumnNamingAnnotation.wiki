#summary @ColumnNaming annotation

= `@ColumnNaming` Annotation =

{{{
@ColumnNaming(value)
}}}

클래스의 필드에 선언된 @Column annontation 의 value 또는 name 을 지정하지 않고, 동일 규칙에 의해 필드명을 컬럼명으로 변환하기 위한 annotation 이다.

|| Elements || Description || Type || Default || Database ||
|| value  || column naming rule || NamingRule || NamingRule.NONE || All ||

= NamingRule =

|| 상수 || 설명 || 필드명 예 || 생성 컬럼명 ||
|| NONE || naming 규칙을 지정하지 않음 || || ||
|| UPPERCASE || 대문자 사용 || parentGroupKey || PARENTGROUPKEY ||
|| LOWERCASE || 소문자 사용 || parentGroupKey || parentgroupkey ||
|| UNDERSCORE || camelCase 필드명을 underscore `"_"` 사용하여 단어 구분 || parentGroupKey<br>groupID || `parent_Group_Key`<br>`group_ID` ||
|| UPPERCASE_UNDERSCORE || 대문자와 underscore 사용 || parentGroupKey || PARENT_GROUP_KEY ||
|| LOWERCASE_UNDERSCORE || 소문자와 underscore 사용 || parentGroupKey || parent_group_key ||

`@ColumnNaming` 에 의해 생성되는 컬럼명보다 `@Column`의 column name 이 우선한다. 즉, `@ColumnNaming` 이 선언되어 있더라도, `@Column`에 value 또는 name 이 지정되어 있으면, `@Column`의 컬럼명을 사용한다.

= Example =

아래의 두 매핑 클래스는 동일한 컬럼명을 갖는다.

{{{
@Table("GROUP")
@ColumnNaming(NamingRule.UPPERCASE_UNDERSCORE)
public class Group {
	@Column(primaryKey = true)
	protected Long groupID;

	@Column
	protected Long parentGroupKey;

	@Column
	protected Integer groupType;

	@Column
	protected String groupID;

	@Column
	protected String groupName;
}

@Table("GROUP")
public class Group {
	@Column(name = "GROUP_KEY",  primaryKey = true)
	protected Long groupKey;

	@Column(name="PARENT_GROUP_KEY")
	protected Long parentGroupKey;
	
	@Column(name="GROUP_TYPE")
	protected Integer groupType;
		
	@Column(name="GROUP_ID")
	protected String groupID;
	
	@Column(name="GROUP_NAME")
	protected String groupName;
}
}}}

*Since:* 0.3