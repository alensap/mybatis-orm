#summary One-sentence summary of this page.

= Annotation =

 * `@Join`, `@Fields` 추가
 * `@Column` 에 references 속성 추가

= Sample =

== Inner JOin ==

{{{
@Join
class GroupAndUser {
    @Fields("groupKey,groupName")
    Group group;
    @Fields("roleType")
    GroupUser groupUser;
    @Fields("*")
    User user;
}

@Table
class Group {
    @Column(primaryKey=true)
    Long groupKey;
    @Column
    String groupName;
}

@Table
class GroupUser {
    @Column(references="Group.groupKey")
    Long groupKey;
    @Column(references="User.userKey")
    Long userKey;
}

@Table
class User {
    @Column(primaryKey=true)
    Long userKey;
    @Column
    String useName;
}

Group group = new Group();
group.setGroupKey(1);
GroupAndUser gu = new GroupAndUser();
gu.setGroup(group);

List<GroupAndUser> list = entityManager.list(gu);
for (GroupAndUser gau : list) {
    System.out.println(gau.getUser().getUserName();
}
}}}

{{{
SELECT A.group_key group_groupKey, A.group_name, group_groupName,
    B.role_type groupUser_roleType,
    C.user_key user_userKey, C.user_name user_userName
FROM NC_GROUP A INNER JOIN NC_GROUP_USER B ON A.group_key = B.group_key INNER JOIN NC_USER C ON B.user_key = C.user_key
WHERE A.group_key = 1
}}}

== Outer Join ==

http://www.mybatis.org/core/sqlmap-xml.html#Result_Maps

{{{

@Join("Blog LEFT Author LEFT Post LEFT Comment LEFT PostTag LEFT TAG")

@Join("Blog LEFT Author ON Blog.authorId = Author.id\
LEFT Post ON Blog.id = Post.blogId\
LEFT Comment ON Post.id = Comment.PostId
LEFT PostTag ON PostTag.postId = Post.id
LEFT TAG ON PostTag.tagId = Tag.id")

class BlogResult {
    @Fields("id,title,authorId")
    Blog blog;
    @Fields("id,username,passwod,email,bio,favouriteSection")
    Author author;
    @Fields("id,blogId,authorId,createdOn,section,subject,draft,body")
    Post post;
    @Fields("id,postId,name,comment")
    Comment comment;
    PostTag postTag;
    @Fields("id,name")
    Tag tag
}
}}}

{{{
from Blog B
       left outer join Author A on B.author_id = A.id
       left outer join Post P on B.id = P.blog_id
       left outer join Comment C on P.id = C.post_id
       left outer join Post_Tag PT on PT.post_id = P.id
       left outer join Tag T on PT.tag_id = T.id
}}}