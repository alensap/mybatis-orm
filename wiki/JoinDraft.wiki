#summary One-sentence summary of this page.

= Annotation =

 * `@Join`, `@Fields` 추가
 * `@Column` 에 references 속성 추가

= 사용법 =

 # `@Table` annotation을 갖는 클래스들로 복합 클래스를 생성하고 `@Join` annotation 부여
 # `@Table` annotation 클래스에 `@Fields` annotation 이용하여 SELECT 대상 필드 지정
 # foreign key에 해당되는 필드의 `@Column` annotation에 references 속성 추가

= @Join Annotation =

`@Join(<join hint>)`와 같이 쓴다. join hint 가 없으면, `@Join` 클래스에 선언된 순서대로 INNER JOIN 구문 생성한다. 만약, 이전에 선언된 클래스를 참조하는 필드가 없으면 InvalidJoinException이 발생한다.

{{{
@Table("GROUP")
class Group {
    @Column(name="group_key",primaryKey=true)
    Long groupKey;
    @Column("group_name")
    String groupName;
}

@Table("GROUP_USER")
class GroupUser {
    @Column(name="group_key", references="Group.groupKey")
    Long groupKey;
    @Column(name="user_key", references="User.userKey")
    Long userKey;
}

@Table("USER")
class User {
    @Column(name="user_key", primaryKey=true)
    Long userKey;
    @Column("user_name")
    String useName;
}

@Join
class GroupAndUser {
    @Fields("groupKey,groupName")
    Group group;
    GroupUser groupUser;
    @Fields("*")
    User user;
}

Group group = new Group();
group.setGroupKey(1);
GroupAndUser gu = new GroupAndUser();
gu.setGroup(group);

List<GroupAndUser> list = entityManager.list(gu);
for (GroupAndUser gau : list) {
    System.out.println(gau.getUser().getUserName();
}
}}}

{{{
SELECT A.group_key group_groupKey, A.group_name group_groupName,
    C.user_key user_userKey, C.user_name user_userName
FROM GROUP A INNER JOIN GROUP_USER B ON A.group_key = B.group_key
    INNER JOIN USER C ON B.user_key = C.user_key
WHERE A.group_key = 1
}}}

http://www.mybatis.org/core/sqlmap-xml.html#Result_Maps

{{{
// ON 조건을 생략했을 때, @Column 의 references를 참고하여 ON 조건을 생성
@Join("blog LEFT JOIN author LEFT JOIN post LEFT JOIN comment LEFT JOIN postTag LEFT JOIN tag")

// ON 조건을 썼을 때
@Join("blog LEFT JOIN author ON blog.authorId = author.id\
LEFT JOIN post ON blog.id = post.blogId\
LEFT JOIN comment ON post.id = comment.PostId
LEFT JOIN postTag ON postTag.postId = post.id
LEFT JOIN tag ON postTag.tagId = tag.id")

class BlogResult {
    @Fields("id,title,authorId")
    Blog blog;
    @Fields("id,username,passwod,email,bio,favouriteSection")
    Author author;
    @Fields("id,blogId,authorId,createdOn,section,subject,draft,body")
    Post post;
    @Fields("id,postId,name,comment")
    Comment comment;
    PostTag postTag;
    @Fields("id,name")
    Tag tag
}
}}}

{{{
from Blog B
       left outer join Author A on B.author_id = A.id
       left outer join Post P on B.id = P.blog_id
       left outer join Comment C on P.id = C.post_id
       left outer join Post_Tag PT on PT.post_id = P.id
       left outer join Tag T on PT.tag_id = T.id
}}}

SELF JOIN

{{{
@Table("EMPLOYEE")
class Employee {
    @Column(primaryKey=true)
    Integer employeeId;
    @Column
    String name;
    @Column
    Integer managerId;
}

@Join("employee LEFT JOIN manager ON employee.managerId = manager.employeeId")
class EmployeeManager {
    @Fields("*")
    Employee employee;
    @Fields("employeeId,name")
    Employee manager;
}
}}}

{{{
SELECT A.employeeId, A.name, A.managerId, B.employeeId, B.name
FROM EMPLOYEE A LEFT JOIN EMPLOYEE B ON A.managerId = B.employeeId
}}}


